#!/bin/sh

set -e

extraconfigs="
NETFILTER_XT_MATCH_RECENT
NETFILTER_XT_TARGET_LOG
EFI_STUB
"

arch=$(uname -m | sed -e 's/x86_/amd/;s/i6/x/')

get_uuid() {
	test "$1" || exit 1
	test "$2" || exit 2
	/sbin/blkid | awk -F\" -e 'OFS=""' -e "/^$(echo $1 | tr / .):/{"'
	for(n=1;n<=NF;n++){if($n~/UUID=/){break}}
	for(o=1;o<=NF;o++){if($o~/TYPE=/){break}}
	if($n!~/UUID=/){exit}
	if($o!~/TYPE=/){exit}
	print "UUID=\"",$(n+1),"\" '"$2"' ",$(o+1);exit}'
}

get_fstype() {
	blkid | awk -F\" '{for(n=1;n<=NF;n++){if($n~/TYPE=/){break}};print$(n+1)}' | sort -u
}

use() {
	packageuse=/etc/portage/package.use
	test x"$1" = "x" && exit 3
	test x"$2" = "x" && exit 4
	category=$(dirname $1)
	package=$(basename $1)
	shift

	if test -f $packageuse; then
		echo "$category/$package $@" >> $packageuse
	else
		test -d $packageuse || mkdir -p $packageuse
		echo "$category/$package $@" >> $packageuse/$category
	fi
}


# This will fail if /usr/portage has not been prepared
test -d /usr/portage || (echo /usr/portage not found. Quitting.>&2; exit 1)
env-update >/dev/null && source /etc/profile

while test "${#@}" -gt 0; do
	case "$1" in
	# Setup grub in bios mode
	-b)
		extraprogs="$extraprogs grub:2"
		bios="true"
		if mountpoint -q /boot && ! egrep -q ' /boot .*[ ,]ro[ ,]' /proc/mounts; then
			echo "" >&2
			echo "WARNING: Detected /boot mounted as read-only." >&2
			echo "WARNING: Remounting as read-write..." >&2
			echo "" >&2
			remount=true
		fi
		;;
	# Run genkernel during the build
	-g)	run_genkernel="true"
		memtot=$(awk '/MemTotal/{print$2}' /proc/meminfo)
		swaptot=$(awk '/SwapTotal/{print$2}' /proc/meminfo)
		extraprogs="$extraprogs genkernel-next"
		if test $(( $memtot + $swaptot )) -lt 512808; then
			# bug 554200
			(echo Not enough RAM to compile boost for genkernel-next.>&2;)
			(echo Adding make.conf flags to lower memory requirements.>&2;)
			sed -i -e '/MAKEOPTS/s/^/#/' /etc/portage/make.conf
			tee -a /etc/portage/make.conf <<<'MAKEOPTS="-j1"'
			# very light optimisations
			tee -a /etc/portage/make.conf <<<'CFLAGS="$CFLAGS --param ggc-min-expand=20 --param ggc-min-heapsize=32768"'
			# medium optimisations
			#tee -a /etc/portage/make.conf <<<'CFLAGS="$CFLAGS --param ggc-min-expand=10 --param ggc-min-heapsize=8192"'
			# extreme optimisations
			#tee -a /etc/portage/make.conf <<<'CFLAGS="$CFLAGS --param ggc-min-expand=0 --param ggc-min-heapsize=4096 -fno-inline"'
		fi
		;;
	# Set profile to hardened
	-h)	bec="eselect profile set hardened/linux/$arch;"
		for i in gcc libtool binutils linux-headers glibc; do
			bec="$bec emerge -q1 $i;"
		done
		extraprogs="$extraprogs hardened-sources"
		bec="$bec emerge -qe system;"
		;;
	-n)	gkopts="$gkopts --nconfig"
		;;
	-r)	extraprogs="$extraprogs vim wpa_supplicant"
		;;
	# install the xen hypervisor
	# this is incompatible with the hardened profile
	-x)
		py2ver="$(eselect python list --python2 | awk 'END{ print $2 }')"
		if test x"$py2ver" = "x"; then
			extraprogs="$extraprogs dev-lang/python:2.7"
		fi
		aec="$aec eselect python set python2.7; python-updater;"
		aac="$aac emerge -q xen;"
		if test ! -d /run/lock; then
			mkdir -p /run/lock
			chown root:uucp /run/lock
			chmod 775 /run/lock
		fi
		;;
	# do a stage1 install
	-1)	bec="/usr/portage/scripts/bootstrap.sh;"
		bec="$bec emerge -qe system;"
		;;
	-2)	bec="emerge -qe system;"
		;;
	--)	break
		;;
	*)	extraprogs="$extraprogs $1"
		;;
	esac
	shift
done

#egrep -q '^root:\*:' /etc/shadow && passwd
sed -i -e '/^root:\*/s/:\*:/::/' /etc/shadow

for i in $(get_fstype); do
	case "$i" in
	linux_raid_member)	fsprogs="$fsprogs mdadm"
				dracutopts="$dracutopts mdraid"
				gkopts="$gkopts --mdadm"
				aec="$aec rc-update add mdraid boot;"
				;;
	crypto_LUKS)	fsprogs="$fsprogs cryptsetup"
			dracutopts="$dracutopts crypt"
			gkopts="$gkopts --luks"
			use	dev-libs/popt		static-libs
			use	dev-libs/libgcrypt	static-libs
			use	dev-libs/libgpg-error	static-libs
			use	sys-apps/util-linux	static-libs
			;;
	LVM2_member)	fsprogs="$fsprogs lvm2"
			dracutopts="$dracutopts lvm"
			gkopts="$gkopts --lvm"
			aec="$aec rc-update add lvm boot;"
			use	sys-boot/grub:2		device-mapper
			;;
	reiserfs)	fsprogs="$fsprogs reiserfsprogs"
			;;
	btrfs)	fsprogs="$fsprogs btrfs-progs"
		dracutopts="$dracutopts btrfs"
		# In addition to adding btrfs RAID to initramfs,
		# add btrfs support to the kernel
		gkopts="$gkopts --btrfs"
		extraconfigs="$extraconfigs BTRFS_FS"
		# as part of this overlay, btrfs-progs is unmasked
		;;
	xfs)	fsprogs="$fsprogs xfsprogs"
		;;
	# XXX: the following are untested and need capitalisation checks
	jfs)	fsprogs="$fsprogs jfsutils"
		;;
	fat*)	fsprogs="$fsprogs dosfstools"
		;;
	exfat)	fsprogs="$fsprogs exfat-utils"
		;;
	ntfs)	fsprogs="$fsprogs ntfs3g"
		;;
	ext*)	;; # nothing needs to be done
	*)	;; # unknown entry
	esac
done

if test -f /etc/make.conf; then
	# append contents of /etc/make.conf to /etc/portage/make.conf
	tee -a /etc/portage/make.conf </etc/make.conf
	rm -f /etc/make.conf
fi

test "$dracutopts" && \
	sed -i -e '/DRACUT_MODULES/{c'"DRACUT_MODULES=\"$dracutopts\"
q}" -e '$a'"DRACUT_MODULES=\"$dracutopts\"" /etc/portage/make.conf
egrep -q "lvm|crypt|mdraid|dmraid" /etc/portage/make.conf && \
	dracutuse="$dracutuse device-mapper"
egrep -q "iscsi|livenet|nbd|ssh-client" /etc/portage/make.conf && \
	dracutuse="$dracutuse net"
test x"$dracutuse" != "x" && use sys-kernel/dracut "$dracutuse"

test x"$bec" = "x" || sh -c "$bec"

emerge -q1u portage

cmp -s /etc/localtime /usr/share/zoneinfo/Factory && \
	emerge -1q --config timezone-data

# Remove udev in favour of systemd
if qatom /var/db/pkg/sys-fs/udev* | cut -d' ' -f2 | grep '^udev$'; then
	echo "WARNING: udev installed. Removing..." >&2
	emerge -qC sys-fs/udev virtual/udev || true
fi

systemdver=$(qatom /var/db/pkg/sys-apps/systemd* | awk '$1=="sys-apps"&&$2=="systemd"{print$3}')
if test x"$systemdver" != "x" || test "$systemdver" -gt 228; then
	echo "WARNING: systemd not installed or version too low. Updating..." >&2
	emerge -q1u '>=systemd-228'
fi

emerge -qu $fsprogs $extraprogs

test x"$aec" = "x" || sh -c "$aec"

egrep -q 'dev-lang/perl' /var/log/emerge.log && perl-cleaner -q --reallyall || true
egrep -q 'dev-lang/python' /var/log/emerge.log && python-updater || true
if egrep -q 'sys-devel/gcc' /var/log/emerge.log; then
	ccpro=$(gcc-config -l | awk 'END{print $2}')
	test "$ccpro" && test "$(gcc-config -c)" != "$ccpro" && gcc-config $ccpro
	env-update && source /etc/profile
	emerge -1q libtool
fi

if test x"$bios" = "xtrue"; then
	if mountpoint -q /boot; then
		bootpath=/boot
		bootpart="$(grub-probe -t device /boot | sed q)"
		test  "$bootpart" = "/dev/*" && cat >>/etc/fstab <<-EOF
		$(get_uuid $bootpart /boot) noatime,noauto 1 2
		EOF

		# This produces output like:
		#  (hostdisk//dev/sda,gpt3)
		bootdev=$(grub-probe -t drive /boot | sed 's://:/:' | egrep -o '/([^,]+)')
	else
		bootpath=/
	fi
	bootdev=$(grub-probe -t drive $bootpath | sed 's://:/:' | egrep -o '/([^,]+)')
	test -b "$bootdev" && aac="$aac grub-install $bootdev;"

	rootpart=$(grub-probe -t device / | sed q)
	test x"$rootpart" != "x" && uuid=$(get_uuid $rootpart /)
	test x"$uuid" != "x" && cat >>/etc/fstab<<-EOF
	$uuid noatime 1 1
	EOF

	test x"$remount" = "xtrue" && mount -o rw,remount /boot

	case "$aac" in
		*grub-install*)
			aac="$aac grub-mkconfig -o /boot/grub/grub.cfg;"
			;;
	esac

	egrep -q '^[^#]*GRUB_CMDLINE_LINUX=' /etc/default/grub || \
		sed -i -e '/# GRUB_CMDLINE_LINUX="init=\/usr\/lib\/systemd\/systemd"/s/^# //' /etc/default/grub
fi

if test x"$run_genkernel" = "xtrue"; then
	for OPT in $extraconfigs; do
		/usr/src/linux/scripts/config \
			--file /usr/share/genkernel/arch/$(uname -m | sed -e 's/i6/x/')/kernel-config \
			-e $OPT
	done

	/usr/bin/genkernel $gkopts all
fi

eselect news read

test -f /etc/machine-id || systemd-machine-id-setup

test x"$aac" = "x" || sh -c "$aac"
