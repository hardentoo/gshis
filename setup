#!/bin/sh

set -e
extraprogs="acpid dhcpcd gentoolkit htop iproute2 msmtp nfs-utils ntp syslog-ng vixie-cron"

arch=$(uname -m | sed -e 's/x86_/amd/;s/i6/x/')
dogrub=/

get_uuid() {
	test "$1" || exit 1
	test "$2" || exit 2
	/sbin/blkid | awk -F\" -e 'OFS=""' -e "/$(echo $1 | tr / .)/{"'
	for(n=1;n<=NF;n++){if($n~/ UUID=/){break}}
	if ($n!~/ UUID=/){exit}
	print "UUID=\"", $(n+1), "\" '"$2"' ", $(NF-1)}'
}

get_fstype() {
	blkid | awk -F\" '{ print $(NF-1) }' | sort -u
}

ckc() {
	if test -z "${sources=gentoo-sources}"; then
		echo :
		return
	fi
	config="/usr/share/genkernel/arch/$(uname -m | sed 's/i6/x/')/kernel-config"
	echo "sed -i -e '/^CONFIG_$1=/d;\$aCONFIG_$1=${2:-y}' $config"
}

use() {
	packageuse=/etc/portage/package.use
	test x"$1" = "x" && exit 3
	test x"$2" = "x" && exit 4
	category=$(dirname $1)
	package=$(basename $1)

	if test -f $packageuse; then
		echo "$category/$package $@" >> $packageuse
	else
		test -d $packageuse || mkdir -p $packageuse
		echo "$category/$package $@" >> $packageuse/$category
	fi
}


# This will fail if /usr/portage has not been prepared
test -d /usr/portage || (echo /usr/portage not found. Quitting.>&2; exit 1)
env-update >/dev/null && source /etc/profile

while test "${#@}" -gt 0; do
	case "$1" in
	# do not install a kernel source package
	-c)	sources=
		;;
	# Set profile to hardened
	-h)	bec="eselect profile set hardened/linux/$arch;"
		for i in gcc libtool binutils linux-headers glibc; do
			bec="$bec emerge -q1 $i;"
		done
		sources="hardened-sources"
		bec="$bec emerge -qe system;"
		;;
	# install the xen hypervisor
	# this is incompatible with the hardened profile
	-x)	echo 'app-emulation/xen-tools' >> /etc/portage/package.keywords
		echo 'app-emulation/xen' >> /etc/portage/package.keywords
		extraprogs="$extraprogs xen"
		aec="$aec $(ckc PARAVIRT); $(ckc XEN);"
		;;
	# do a stage1 install
	-1)	bec="/usr/portage/scripts/bootstrap.sh;"
		bec="$bec emerge -qe system;"
		;;
	-2)	bec="emerge -qe system;"
		;;
	--)	break
		;;
	*)	if test x"$FQDN" = "x"; then
			FQDN=$1
		elif test x"$BOOTPART" = "x"; then
			BOOTPART=$1
		else
			break
		fi
		;;
	esac
	shift
done

test x"$FQDN" = "x" && read -e -p "Hostname: " FQDN

test "${sources=gentoo-sources}" && \
test x"$BOOTPART" = "x" && read -e -p "Boot Partition: " BOOTPART

egrep -q '^root:\*:' /etc/shadow && passwd

HOSTNAME="$(echo $FQDN | awk -F. '{print $1}')"
# The following awk script could be simplified to:
#	{ print $(NF-1) "." $NF }
# However, if you change the '(NF-1)' below to '2', you just chop off
# the first part (if you have deeper hostnames and more robust mail)
DOMAIN="$(echo $FQDN | awk -F. '{ for(i=(NF-1); i<NF; i++) { printf("%s.", $i) } print $NF }')"

cat >/etc/conf.d/hostname <<EOF
hostname="$HOSTNAME"
EOF

cat >/etc/hosts <<EOF
127.0.0.1 $FQDN $HOSTNAME localhost
::1 $FQDN $HOSTNAME localhost
EOF

aec="$aec $(ckc RTC); $(ckc B43 n); $(ckc DEVTMPFS);"
for i in $(get_fstype); do
	case "$i" in
	linux_raid_member)	fsprogs="$fsprogs mdadm"
				dracutopts="$dracutopts mdraid"
				aec="$aec rc-update add mdraid boot;"
				dogrub=/boot
				;;
	crypto_LUKS)	fsprogs="$fsprogs cryptsetup"
			dracutopts="$dracutopts crypt"
			use	dev-libs/popt		static-libs
			use	dev-libs/libgcrypt	static-libs
			use	dev-libs/libgpg-error	static-libs
			use	sys-apps/util-linux	static-libs
			dogrub=/boot
			;;
	LVM2_member)	fsprogs="$fsprogs lvm2"
			dracutopts="$dracutopts lvm"
			aec="$aec rc-update add lvm boot;"
			dogrub=/boot
			use	sys-boot/grub:2		device-mapper
			;;
	reiserfs)	fsprogs="$fsprogs reiserfsprogs"
			;;
	btrfs)	fsprogs="$fsprogs btrfs-progs"
		dracutopts="$dracutopts btrfs"
		# as part of this overlay, btrfs-progs is unmasked
		aec="$aec $(ckc BTRFS_FS);"
		# btrfs needs to be enabled in the kernel
		;;
	xfs)	fsprogs="$fsprogs xfsprogs"
		;;
	# XXX: the following are untested and need capitalisation checks
	jfs)	fsprogs="$fsprogs jfsutils"
		;;
	fat*)	fsprogs="$fsprogs dosfstools"
		;;
	ntfs)	fsprogs="$fsprogs ntfs3g"
		;;
	ext*)	;; # nothing needs to be done
	*)	;; # unknown entry
	esac
done

if test x"$sources" != "x"; then
	test "$dracutopts" && \
		sed -i -e '/DRACUT_MODULES/{c'"DRACUT_MODULES=\"$dracutopts\"
q}" -e '$a'"DRACUT_MODULES=\"$dracutopts\"" /etc/make.conf

	egrep -q "lvm|crypt|mdraid|dmraid" /etc/make.conf && \
		dracutuse="$dracutuse device-mapper"
	egrep -q "iscsi|livenet|nbd|ssh-client" /etc/make.conf && \
		dracutuse="$dracutuse net"
	test x"$dracutuse" != "x" && use sys-kernel/dracut "$dracutuse"
fi

test x"$bec" = "x" || sh -c "$bec"

emerge -q1u portage

cmp -s /etc/localtime /usr/share/zoneinfo/Factory && \
	emerge -1q timezone-data

emerge -qu ${sources=gentoo-sources} ${sources:+genkernel} \
	${sources:+grub:2} ${sources:+dracut} $fsprogs \
	$extraprogs

egrep -q 'dev-lang/perl' /var/log/emerge.log && perl-cleaner --reallyall || true
egrep -q 'dev-lang/python' /var/log/emerge.log && python-updater || true
if egrep -q 'sys-devel/gcc' /var/log/emerge.log; then
	ccpro=$(gcc-config -l | awk 'END{print $2}')
	test "$ccpro" && test "$(gcc-config -c)" != "$ccpro" && gcc-config $ccpro
	env-update && source /etc/profile
	emerge -1q libtool
	revdep-rebuild.py -- --usepkg no --quiet
	revdep-rebuild.sh -- --usepkg no --quiet
fi

cat >>/etc/msmtprc <<EOF
maildomain $FQDN
host $DOMAIN
domain $DOMAIN
EOF

test x"$aec" = "x" || sh -c "$aec"

if test "$sources"; then
	cat >>/etc/fstab <<-EOF
	$(get_uuid $BOOTPART /boot) noatime,noauto 1 2
	$(get_uuid $(grub2-probe -t device /) /) noatime 1 1
	EOF
	grep MAKEOPTS /etc/make.conf >> /etc/genkernel.conf
	genkernel kernel
	dracut -q $(ls /boot/kernel-genkernel* | sed -n '/kernel/{s/kernel/initramfs/;p;q}') $(ls /lib/modules/ 2>/dev/null | sed q)

	test x"$dogrub" != "x" && \
		bootdev=$(grub2-probe -t drive $dogrub | perl -ne 'm!/([^,]+)!;print $1')
	if test -b "$bootdev"; then
		aac="$aac grub2-install $bootdev;"
		aac="$aac grub2-mkconfig -o /boot/grub2/grub.cfg;"
	else
		aac="$aac echo \"don't forget:\";"
		aac="$aac echo -e \"\tgrub2-install <...>\";"
		aac="$aac echo -e \"\tgrub2-mkconfig -o /boot/grub2/grub.cfg\";"
	fi
fi

eselect news read

test x"$aac" = "x" || sh -c "$aac"
